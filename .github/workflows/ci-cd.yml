name: CI/CD Pipeline - Gerenciador de Clientes

on:
  push:
    branches: [ main, developer ]
  pull_request:
    branches: [ main ]

jobs:
  # Build e Test - roda em ambas as branches (developer e main)
  build_and_test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Backend - Java 8 + Maven
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build & Test Backend
        run: mvn -f backend/pom.xml clean install

      # Frontend - Node.js + Angular
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.19.0'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend Dependencies
        run: npm --prefix frontend ci

      - name: Build Frontend
        run: npm --prefix frontend run build -- --configuration production

      - name: Test Frontend
        run: npm --prefix frontend run test -- --watch=false --browsers=ChromeHeadless

  # Deploy Backend - roda apenas na branch main
  deploy_backend:
    name: Deploy Backend to Heroku
    needs: build_and_test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Set up JDK 8 for deployment
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'temurin'
          
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
          
      - name: Build Backend for production
        run: mvn -f backend/pom.xml clean package -DskipTests
        
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
        shell: bash
        
      - name: Deploy Backend to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          appdir: "backend"
          usedocker: false

